<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reacli</title>
    <link>https://reacli.github.io/</link>
    <description>Recent content on Reacli</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <lastBuildDate>Mon, 18 Feb 2019 19:57:39 +0100</lastBuildDate>
    
	<atom:link href="https://reacli.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Use Reacli</title>
      <link>https://reacli.github.io/usage/usage/</link>
      <pubDate>Mon, 18 Feb 2019 19:57:39 +0100</pubDate>
      
      <guid>https://reacli.github.io/usage/usage/</guid>
      <description> If Reacli is installed globally Once you have Reacli globally installed (see installation), you can directly use it like this:
reacli component path/to/my/component  If you did not install Reacli You don&amp;rsquo;t need to have Reacli installed globally to use it. You can use npx to run it wherever you want:
npx reacli component path/to/my/component  </description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://reacli.github.io/options/intro/</link>
      <pubDate>Mon, 18 Feb 2019 19:44:08 +0100</pubDate>
      
      <guid>https://reacli.github.io/options/intro/</guid>
      <description>In this part, we will present various options that enables to customize the way Reacli will create your components.
For a simplicity reason, we will introduce each option separately.
Please be aware that you can combine those options.
 </description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://reacli.github.io/installation/requirements/</link>
      <pubDate>Mon, 18 Feb 2019 19:33:40 +0100</pubDate>
      
      <guid>https://reacli.github.io/installation/requirements/</guid>
      <description>npm As a requirement, all you need is having npm installed.
npx You also might want using Reacli thanks to npx, so it can be useful to install it:
npm install npx  yarn This package can also be installed using yarn.</description>
    </item>
    
    <item>
      <title>Component architecture</title>
      <link>https://reacli.github.io/usage/architecture/</link>
      <pubDate>Mon, 18 Feb 2019 19:57:39 +0100</pubDate>
      
      <guid>https://reacli.github.io/usage/architecture/</guid>
      <description>Architecture Creating a component with no option (reacli component ./my-super-component) will generate the following architecture:
. └── my-super-component ├── components | ├── MySuperComponent.jsx | ├── MySuperComponent.css | └── MySuperComponentContainer.jsx └── index.js  Let&amp;rsquo;s describe it a bit.
index.js We created an index.js at the root of the component folder because we believe that whatever implementation it uses, other projects or components using it should not know, or mind the internal implementation.</description>
    </item>
    
    <item>
      <title>Install</title>
      <link>https://reacli.github.io/installation/install/</link>
      <pubDate>Mon, 18 Feb 2019 19:44:08 +0100</pubDate>
      
      <guid>https://reacli.github.io/installation/install/</guid>
      <description> If you want to use Reacli without running npx, it has to be installed globally either with npm or yarn.
Using npm To install Reacli globally with npm, run:
npm install -g reacli  Using yarn To install Reacli globally with yarn, run:
yarn global add reacli  </description>
    </item>
    
    <item>
      <title>Flow</title>
      <link>https://reacli.github.io/options/flow/</link>
      <pubDate>Mon, 18 Feb 2019 19:44:08 +0100</pubDate>
      
      <guid>https://reacli.github.io/options/flow/</guid>
      <description>Some users might want to type their components with flow.
To create a flow-typed component, just use Reacli with either the --flow or the -f option:
reacli component ./my-super-component -f  It will generate a structure like this:
. └── my-super-component ├── components | ├── MySuperComponent.jsx | ├── MySuperComponent.css | └── MySuperComponentContainer.jsx └── index.js  Container component Generated component Explanation  First, we set the // @flow annotation to configure the component to be flow-typed We create Props and State types, in which we will type our component props or type.</description>
    </item>
    
    <item>
      <title>Redux</title>
      <link>https://reacli.github.io/options/redux/</link>
      <pubDate>Mon, 18 Feb 2019 19:44:08 +0100</pubDate>
      
      <guid>https://reacli.github.io/options/redux/</guid>
      <description>Explanation Some users might want to use React Redux to share props accross components that are at different levels of the DOM.
Redux needs actions to be dispatched in components. Those actions will then be reduced by reducers.
Usage You can generate a component connected to the Redux store using the following command:
reacli component ./my-super-component --redux  It will generate a structure like this:
. └── my-super-component ├── components | ├── MySuperComponent.</description>
    </item>
    
    <item>
      <title>Scss</title>
      <link>https://reacli.github.io/options/scss/</link>
      <pubDate>Mon, 18 Feb 2019 19:44:08 +0100</pubDate>
      
      <guid>https://reacli.github.io/options/scss/</guid>
      <description>Explanation By default, the style file associated to a generated dumb component is a .css file.
Some users might want to use Sass. That is the reason why we added the --scss argument. SCSS is a Sass syntax that is also full compatible with the CSS syntax.
In other words, it means that every valid CSS stylesheet is a valid SCSS file with the same meaning.
Usage You can generate an .</description>
    </item>
    
    <item>
      <title>Configuration file</title>
      <link>https://reacli.github.io/options/configfile/</link>
      <pubDate>Mon, 18 Feb 2019 19:44:08 +0100</pubDate>
      
      <guid>https://reacli.github.io/options/configfile/</guid>
      <description>Description Some users might want to use the Reacli CLI to create several components in the same project. Each component might have to be configured with the same options.
For example, if the project uses Flow for one component, the user might want to use the same option for every component he creates thanks to the CLI.
 That is the reason why Reacli embeds a feature enabling the user to add a .</description>
    </item>
    
  </channel>
</rss>